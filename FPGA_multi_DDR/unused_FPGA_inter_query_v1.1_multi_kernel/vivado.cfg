# kernel_frequency=200

### U250 ###

[connectivity]

nk=controller:1:controller_1
sp=controller_1.entry_point_ids:DDR[3]
sp=controller_1.query_vectors:DDR[3]
sp=controller_1.mem_debug:DDR[3]
sp=controller_1.out_id:DDR[3]
sp=controller_1.out_dist:DDR[3]

slr=controller_1:SLR3

# AXI stream direction: master (interface which writes data) to slave (interface which reads data)

# 1 channel:
nk=per_channel_processing_wrapper:1:per_channel_processing_wrapper_1

sp=per_channel_processing_wrapper_1.db_vectors:DDR[3]

sp=per_channel_processing_wrapper_1.links_base:DDR[3]

slr=per_channel_processing_wrapper_1:SLR3

# # 2 channels:
# nk=per_channel_processing_wrapper:2:per_channel_processing_wrapper_1.per_channel_processing_wrapper_2

# sp=per_channel_processing_wrapper_1.db_vectors:DDR[3]
# sp=per_channel_processing_wrapper_2.db_vectors:DDR[2]

# sp=per_channel_processing_wrapper_1.links_base:DDR[3]
# sp=per_channel_processing_wrapper_2.links_base:DDR[2]

# slr=per_channel_processing_wrapper_1:SLR3
# slr=per_channel_processing_wrapper_2:SLR2

# # 3 channels:
# nk=per_channel_processing_wrapper:3:per_channel_processing_wrapper_1.per_channel_processing_wrapper_2.per_channel_processing_wrapper_3

# sp=per_channel_processing_wrapper_1.db_vectors:DDR[3]
# sp=per_channel_processing_wrapper_2.db_vectors:DDR[2]
# sp=per_channel_processing_wrapper_3.db_vectors:DDR[0]

# sp=per_channel_processing_wrapper_1.links_base:DDR[3]
# sp=per_channel_processing_wrapper_2.links_base:DDR[2]
# sp=per_channel_processing_wrapper_3.links_base:DDR[0]

# slr=per_channel_processing_wrapper_1:SLR3
# slr=per_channel_processing_wrapper_2:SLR2
# slr=per_channel_processing_wrapper_3:SLR1

# # 4 channels:
# nk=per_channel_processing_wrapper:4:per_channel_processing_wrapper_1.per_channel_processing_wrapper_2.per_channel_processing_wrapper_3.per_channel_processing_wrapper_4

# sp=per_channel_processing_wrapper_1.db_vectors:DDR[3]
# sp=per_channel_processing_wrapper_2.db_vectors:DDR[2]
# sp=per_channel_processing_wrapper_3.db_vectors:DDR[1]
# sp=per_channel_processing_wrapper_4.db_vectors:DDR[0]

# sp=per_channel_processing_wrapper_1.links_base:DDR[3]
# sp=per_channel_processing_wrapper_2.links_base:DDR[2]
# sp=per_channel_processing_wrapper_3.links_base:DDR[1]
# sp=per_channel_processing_wrapper_4.links_base:DDR[0]

# slr=per_channel_processing_wrapper_1:SLR3
# slr=per_channel_processing_wrapper_2:SLR2
# slr=per_channel_processing_wrapper_3:SLR1
# slr=per_channel_processing_wrapper_4:SLR0

# >= 1 channel:
sc=controller_1.axis_query_batch_size_chan_0:per_channel_processing_wrapper_1.axis_query_batch_size:16
sc=controller_1.axis_query_vectors_in_chan_0:per_channel_processing_wrapper_1.axis_query_vectors_in:16
sc=controller_1.axis_entry_point_ids_chan_0:per_channel_processing_wrapper_1.axis_entry_point_ids:16

sc=per_channel_processing_wrapper_1.axis_out_ids:controller_1.axis_out_ids_chan_0:512
sc=per_channel_processing_wrapper_1.axis_out_dists:controller_1.axis_out_dists_chan_0:512
sc=per_channel_processing_wrapper_1.axis_debug_signals:controller_1.axis_debug_signals_chan_0:512

# # >= 2 channels:
# sc=controller_1.axis_query_batch_size_chan_1:per_channel_processing_wrapper_2.axis_query_batch_size:16
# sc=controller_1.axis_query_vectors_in_chan_1:per_channel_processing_wrapper_2.axis_query_vectors_in:16
# sc=controller_1.axis_entry_point_ids_chan_1:per_channel_processing_wrapper_2.axis_entry_point_ids:16

# sc=per_channel_processing_wrapper_2.axis_out_ids:controller_1.axis_out_ids_chan_1:512
# sc=per_channel_processing_wrapper_2.axis_out_dists:controller_1.axis_out_dists_chan_1:512
# sc=per_channel_processing_wrapper_2.axis_debug_signals:controller_1.axis_debug_signals_chan_1:512

# # >= 3 channels:
# sc=controller_1.axis_query_batch_size_chan_2:per_channel_processing_wrapper_3.axis_query_batch_size:16
# sc=controller_1.axis_query_vectors_in_chan_2:per_channel_processing_wrapper_3.axis_query_vectors_in:16
# sc=controller_1.axis_entry_point_ids_chan_2:per_channel_processing_wrapper_3.axis_entry_point_ids:16

# sc=per_channel_processing_wrapper_3.axis_out_ids:controller_1.axis_out_ids_chan_2:512
# sc=per_channel_processing_wrapper_3.axis_out_dists:controller_1.axis_out_dists_chan_2:512
# sc=per_channel_processing_wrapper_3.axis_debug_signals:controller_1.axis_debug_signals_chan_2:512

# # >= 4 channels:
# sc=controller_1.axis_query_batch_size_chan_3:per_channel_processing_wrapper_4.axis_query_batch_size:16
# sc=controller_1.axis_query_vectors_in_chan_3:per_channel_processing_wrapper_4.axis_query_vectors_in:16
# sc=controller_1.axis_entry_point_ids_chan_3:per_channel_processing_wrapper_4.axis_entry_point_ids:16

# sc=per_channel_processing_wrapper_4.axis_out_ids:controller_1.axis_out_ids_chan_3:512
# sc=per_channel_processing_wrapper_4.axis_out_dists:controller_1.axis_out_dists_chan_3:512
# sc=per_channel_processing_wrapper_4.axis_debug_signals:controller_1.axis_debug_signals_chan_3:512


[profile]
data=all:all:all

[vivado] 

##### Enable one of the following strategies by uncomment the options #####

# param=project.writeIntermediateCheckpoints=true

prop=run.impl_1.strategy=Performance_SpreadSLLs
# prop=run.impl_1.strategy=Performance_BalanceSLLs
# prop=run.impl_1.strategy=Congestion_SSI_SpreadLogic_high

### Strategy Performance_SpreadSLL ###
# A placement variation for SSI devices with tendency to spread SLR crossings horizontally.
# prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=SSI_SpreadSLLs
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-critical_cell_opt -rewire -hold_fix -sll_reg_hold_fix -retime}


### Strategy Performance_BalanceSLL ###
# A placement variation for SSI devices with more frequent crossings of SLR boundaries.
# prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=SSI_BalanceSLLs
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-critical_cell_opt -rewire -hold_fix -sll_reg_hold_fix -retime}


### Strategy Congestion_SSI_SpreadLogic_high ###
# Spread logic throughout the device to avoid creating congested regions, intended for SSI devices (high setting is the highest degree of spreading).
# prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=SSI_SpreadLogic_high
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE=AggressiveExplore
# prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=AlternateCLBRouting
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.IS_ENABLED}=true
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-critical_cell_opt -rewire -hold_fix -sll_reg_hold_fix -retime}

### Other options ###
# param=compiler.userPreSysLinkTcl=$(PWD)/tcl/plram.tcl 
# param=route.enableGlobalHoldIter=true
# param=project.writeIntermediateCheckpoints=true
# prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=SSI_SpreadLogic_high
# prop=run.impl_1.{STEPS.PLACE_DESIGN.ARGS.MORE OPTIONS}={-post_place_opt}
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.IS_ENABLED}=true 
# prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE=ExploreWithHoldFix
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-fanout_opt -critical_cell_opt -rewire -slr_crossing_opt -tns_cleanup -hold_fix -sll_reg_hold_fix -retime}
# prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-placement_opt -critical_cell_opt}
#prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-hold_fix -slr_crossing_opt}
# prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=Explore
# prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=AlternateCLBRouting 
#prop=run.impl_1.{STEPS.PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-hold_fix}
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.IS_ENABLED}=true 
# prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-critical_cell_opt -rewire -hold_fix -sll_reg_hold_fix -retime}
#prop=run.impl_1.{STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.MORE OPTIONS}={-critical_cell_opt -rewire -slr_crossing_opt -tns_cleanup -hold_fix -sll_reg_hold_fix -retime}
